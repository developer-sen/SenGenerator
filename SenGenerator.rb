#!/usr/bin/ruby

require 'fileutils'
require 'erb'

project_file_name =
if !ARGV[0].nil? && File.fnmatch?( "/*.xcodeproj",ARGV[0]) && File.exist?(ARGV[0])
  ARGV[0]
else
  abort("invalid .xcodeproj file path.")
end
target_directory =
if !ARGV[1].nil? && Dir.exist?(ARGV[1])
  "#{File.dirname project_file_name}/#{ARGV[1]}"
else
  abort("invalid target name.")
end
generated_file_path =
if !ARGV[2].nil? && File.fnmatch?("*.swift",ARGV[2])
  "#{target_directory}/#{ARGV[2]}"
else
  "#{target_directory}/GeneratedResources.swift"
end

@image_assets = Dir["#{target_directory}/**/*.xcassets/*.imageset"].map { |image|
  asset_name = File.basename(image).split(".").first
  "static let #{asset_name.split.join "_"} = \"#{asset_name}\""
}

@color_assets = Dir["#{target_directory}/**/*.xcassets/*.colorset"].map { |color|
  color_name = File.basename(color).split(".").first
  "static let #{color_name.split.join "_"} = \"#{color_name}\""
}

r_file_template = <<-SWIFT_TEMPLATE
//  This file was automatically generated by resources generator and should not be edited.

import Foundation
import UIKit

final class R {
\tfinal class image {
<%- @image_assets.each do |image|-%>
\t\t<%=image%>
<%- end -%>
\t}
\tfinal class color {
<%- @color_assets.each do |color|-%>
\t\t<%=color%>
<%- end -%>
\t}
}
SWIFT_TEMPLATE
puts File.dirname(generated_file_path)

unless Dir.exist? File.dirname(generated_file_path)
  FileUtils.mkdir_p File.dirname(generated_file_path)
end

parser = ERB.new(r_file_template,nil,'-')
file_content = parser.result
File.new(generated_file_path,"w") << file_content
puts "Resources file Created at path = #{generated_file_path}"
